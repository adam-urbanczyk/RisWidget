// The MIT License (MIT)
//
// Copyright (c) 2014 Erik Hvatum
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#version 430 core

layout (binding = 0, r32ui) uniform readonly uimage2DArray blocks;
layout (binding = 1, r32ui) uniform coherent uimage1D histogram;
layout (std430, binding = 0) coherent buffer Extrema {
    uint minBinVal;
    uint maxBinVal;
};

uniform uint binCount;
uniform uint invocationBinCount;

layout (local_size_x = 16) in;

void main()
{
    /* Accumulate block blocks into single histogram representing the entire image */

    uint start = gl_LocalInvocationID.x * invocationBinCount;
    // Ensure that processing of remainder blocks for non-divisible bin count does not proceed beyond last bin
    uint end = min(start + invocationBinCount, binCount);

    uint binValue, bin;
    for(bin = start; bin < end; ++bin)
    {
        binValue = imageLoad(blocks, ivec3(gl_WorkGroupID.x, gl_WorkGroupID.y, bin)).r;
        imageAtomicAdd(histogram, int(bin), binValue);
//      imageAtomicMax(histogram, int(bin), min(binValue, 1));
    }


    /* Use the 16 threads of the first workgroup to find the min and max bin values */

    // Wait for all invocations to complete block accumulation
    barrier();

    if(gl_WorkGroupID.x == 0 && gl_WorkGroupID.y == 0)
    {
        for(bin = start; bin < end; ++bin)
        {
            binValue = imageLoad(histogram, int(bin));
            atomicMin(minBinVal, binValue);
            atomicMax(maxBinVal, binValue);
        }
    }
}
