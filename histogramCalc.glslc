// The MIT License (MIT)
//
// Copyright (c) 2014 Erik Hvatum
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#version 430 core

layout (binding = 0, r16ui) uniform readonly uimage2D image;
layout (binding = 1, r32ui) uniform coherent uimage2DArray histogramBlocks;
uniform float binCount;
uniform ivec2 invocationRegionSize;

layout (local_size_x = 4, local_size_y = 4) in;

void main()
{
    ivec2 start = ivec2(gl_GlobalInvocationID.xy) * invocationRegionSize;
    ivec2 size = imageSize(image);
    // Ensure that processing of remainder blocks for non-divisible images does not proceed beyond image edge
    ivec2 end = ivec2(min(start.x + invocationRegionSize.x, size.x),
                      min(start.y + invocationRegionSize.y, size.y));

    float intensity;
    int bin;
    for(int y = start.y, x; y < end.y; ++y)
    {
        for(x = start.x; x < end.x; ++x)
        {
            intensity = imageLoad(image, ivec2(x, y)).r;
            bin = int(floor(intensity / 65535.0 * binCount));
            imageAtomicAdd(histogramBlocks, ivec3(gl_WorkGroupID.x, gl_WorkGroupID.y, bin), 1);
        }
    }
}
